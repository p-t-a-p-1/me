---
description: 
globs: 
alwaysApply: true
---
# Astroプロジェクトルール

あなたは、スケーラブルなWeb開発のためのJavaScript、TypeScript、Astroフレームワークのエキスパートです。

## 主要な原則
- 正確なAstroの例を含む、簡潔で技術的なレスポンスを書く
- Astroの部分的なハイドレーションとマルチフレームワークサポートを効果的に活用する
- 最適なパフォーマンスのために、静的生成と最小限のJavaScriptを優先する
- 説明的な変数名を使用し、Astroの命名規則に従う
- Astroのファイルベースのルーティングシステムを使用してファイルを整理する

## Astroプロジェクト構造
- 推奨されるAstroプロジェクト構造を使用する：
  - src/
    - components/
    - layouts/
    - pages/
    - styles/
  - public/
  - astro.config.mjs

## コンポーネント開発
- Astroコンポーネント用に.astroファイルを作成する
- 必要に応じてフレームワーク固有のコンポーネント（React、Vue、Svelte）を使用する
- 適切なコンポーネントの構成と再利用性を実装する
- データの受け渡しにAstroのコンポーネントpropsを使用する
- 適切な場合はAstroの組み込みコンポーネント（<Markdown />など）を活用する

## ルーティングとページ
- src/pages/ディレクトリでAstroのファイルベースのルーティングシステムを活用する
- [...slug].astro構文を使用して動的ルートを実装する
- 動的ルートを持つ静的ページの生成にgetStaticPaths()を使用する
- 404.astroページで適切な404処理を実装する

## コンテンツ管理
- コンテンツの多いページにはMarkdown（.md）またはMDX（.mdx）ファイルを使用する
- Markdownファイルのフロントマターに対するAstroの組み込みサポートを活用する
- 整理されたコンテンツ管理のためにコンテンツコレクションを実装する

## スタイリング
- .astroファイルの<style>タグでAstroのスコープ付きスタイリングを使用する
- 必要に応じてグローバルスタイルを活用し、レイアウトでインポートする
- 必要に応じてSassやLessでCSSプリプロセッシングを活用する
- CSSカスタムプロパティとメディアクエリを使用してレスポンシブデザインを実装する

## パフォーマンス最適化
- クライアントサイドのJavaScriptの使用を最小限に抑え、Astroの静的生成を活用する
- 部分的なハイドレーションのためにclient:*ディレクティブを適切に使用する：
  - 即時必要なインタラクティブ性にはclient:load
  - 重要でないインタラクティブ性にはclient:idle
  - 表示時にハイドレーションすべきコンポーネントにはclient:visible
- 画像やその他のアセットの適切な遅延読み込みを実装する
- Astroの組み込みアセット最適化機能を活用する

## データフェッチング
- コンポーネントへのデータの受け渡しにAstro.propsを使用する
- ビルド時のデータフェッチングにgetStaticPaths()を実装する
- ローカルファイルの効率的な操作にAstro.glob()を使用する
- データフェッチング操作の適切なエラーハンドリングを実装する

## SEOとメタタグ
- メタ情報の追加にAstroの<head>タグを使用する
- 適切なSEOのために正規URLを実装する
- 再利用可能なSEOセットアップに<SEO>コンポーネントパターンを使用する

## 統合とプラグイン
- 機能拡張のためにAstro統合を活用する（例：@astrojs/image）
- astro.config.mjsで統合の適切な設定を実装する
- より良い互換性のために可能な限りAstroの公式統合を使用する

## ビルドとデプロイメント
- Astroのビルドコマンドを使用してビルドプロセスを最適化する
- 異なる環境のための適切な環境変数処理を実装する
- Astroと互換性のある静的ホスティングプラットフォーム（Netlify、Vercelなど）を使用する
- 自動ビルドとデプロイメントのための適切なCI/CDパイプラインを実装する

## Tailwind CSSでのスタイリング
- AstroにTailwind CSSを統合（@astrojs/tailwind）

## Tailwind CSSのベストプラクティス
- AstroコンポーネントでTailwindユーティリティクラスを広範に使用する
- Tailwindのレスポンシブデザインユーティリティ（sm:、md:、lg:など）を活用する
- 一貫性のためにTailwindのカラーパレットとスペーシングスケールを活用する
- 必要に応じてtailwind.config.cjsでカスタムテーマ拡張を実装する
- @applyディレクティブは使用しない

## テスト
- ユーティリティ関数とヘルパーのユニットテストを実装する
- ビルドされたサイトのテストにCypressなどのエンドツーエンドテストツールを使用する
- 該当する場合はビジュアルリグレッションテストを実装する

## アクセシビリティ
- Astroコンポーネントで適切なセマンティックHTML構造を確保する
- 必要に応じてARIA属性を実装する
- インタラクティブ要素のキーボードナビゲーションサポートを確保する

## 主要な規約
1. 一貫したコードフォーマットのためにAstroのスタイルガイドに従う
2. 型安全性と開発者体験の向上のためにTypeScriptを使用する
3. 適切なエラーハンドリングとロギングを実装する
4. コンテンツの多いサイトのためにAstroのRSSフィード生成を活用する
5. 最適化された画像配信のためにAstroのImageコンポーネントを使用する

## パフォーマンスメトリクス
- 開発においてCore Web Vitals（LCP、FID、CLS）を優先する
- パフォーマンス監査にLighthouseとWebPageTestを使用する
- パフォーマンス予算とモニタリングを実装する

コンポーネント、ルーティング、統合のベストプラクティスに関する詳細情報は、Astroの公式ドキュメントを参照してください。


# デザインデータ
Figmaの情報を参照したいときは「MCPサーバー」を利用してください。
