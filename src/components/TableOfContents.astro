---
export interface Props {
	headings: Array<{
		depth: number;
		text: string;
		slug: string;
	}>;
}

const { headings } = Astro.props;

// 深度2と3のヘッディングのみを表示
const filteredHeadings = headings.filter((heading) => heading.depth <= 3);
---

{
	filteredHeadings.length > 0 && (
		<nav class="table-of-contents">
			<h3 class="table-of-contents__title">目次</h3>
			<ul class="table-of-contents__list">
				{filteredHeadings.map((heading) => (
					<li
						class={`table-of-contents__item table-of-contents__item--depth-${heading.depth}`}
					>
						<a href={`#${heading.slug}`} class="table-of-contents__link">
							{heading.text}
						</a>
					</li>
				))}
			</ul>
		</nav>
	)
}

<style>
	.table-of-contents {
		background-color: #f8f9fa;
		border: 1px solid #e5e5e5;
		border-radius: 8px;
		padding: 20px;
		margin-bottom: 32px;
	}

	.table-of-contents__title {
		font-family: "Noto Sans JP", sans-serif;
		font-size: 16px;
		font-weight: 700;
		color: #262626;
		margin: 0 0 16px;
		padding-bottom: 8px;
		border-bottom: 1px solid #e5e5e5;
	}

	.table-of-contents__list {
		list-style: none;
		padding: 0;
		margin: 0;
	}

	.table-of-contents__item {
		margin-bottom: 8px;
	}

	.table-of-contents__item--depth-2 {
		padding-left: 0;
	}

	.table-of-contents__item--depth-3 {
		padding-left: 16px;
	}

	.table-of-contents__link {
		display: block;
		color: #666;
		text-decoration: none;
		font-size: 14px;
		line-height: 1.5;
		padding: 4px 8px;
		border-radius: 4px;
		transition: all 0.2s ease;
	}

	.table-of-contents__link:hover {
		background-color: #e5e5e5;
		color: #262626;
	}

	@media (max-width: 768px) {
		.table-of-contents {
			margin-bottom: 20px;
		}
	}
</style>

<script>
	// スムーススクロールとアクティブリンクの設定
	document.addEventListener("DOMContentLoaded", function () {
		const tocLinks = document.querySelectorAll(".table-of-contents__link");
		const headings = document.querySelectorAll("h1, h2, h3");

		// スムーススクロール
		tocLinks.forEach((link) => {
			link.addEventListener("click", function (e) {
				e.preventDefault();
				const targetId = this.getAttribute("href")?.substring(1);
				if (targetId) {
					const targetElement = document.getElementById(targetId);
					if (targetElement) {
						targetElement.scrollIntoView({
							behavior: "smooth",
							block: "start",
						});
					}
				}
			});
		});

		// アクティブリンクのハイライト
		function highlightActiveLink() {
			let activeHeading: Element | null = null;
			const scrollPosition = window.scrollY + 100;

			headings.forEach((heading) => {
				const rect = heading.getBoundingClientRect();
				const top = rect.top + window.scrollY;

				if (top <= scrollPosition) {
					activeHeading = heading;
				}
			});

			tocLinks.forEach((link) => {
				link.classList.remove("active");
				if (
					activeHeading &&
					(activeHeading as HTMLElement).id &&
					link.getAttribute("href") === `#${(activeHeading as HTMLElement).id}`
				) {
					link.classList.add("active");
				}
			});
		}

		window.addEventListener("scroll", highlightActiveLink);
		highlightActiveLink(); // 初期実行
	});
</script>

<style is:global>
	.table-of-contents__link.active {
		background-color: #262626;
		color: #ffffff;
		font-weight: 600;
	}
</style>
