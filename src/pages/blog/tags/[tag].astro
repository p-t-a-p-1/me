---
import { getCollection } from "astro:content";
import BlogCard from "../../../components/BlogCard.astro";
import BlogSidebar from "../../../components/BlogSidebar.astro";
import Layout from "../../../layouts/Layout.astro";

export async function getStaticPaths() {
	const allPosts = await getCollection("blog");
	const publishedPosts = allPosts.filter((post) => post.data.publishedAt);

	// すべてのタグを取得
	const allTags = [
		...new Set(publishedPosts.flatMap((post) => post.data.tags || [])),
	];

	return allTags.map((tag) => ({
		params: { tag },
		props: { tag },
	}));
}

const { tag } = Astro.props;

// 特定のタグを含む記事を取得
const allPosts = await getCollection("blog");
const filteredPosts = allPosts
	.filter((post) => post.data.publishedAt && post.data.tags?.includes(tag))
	.sort((a, b) => {
		const dateA = new Date(a.data.publishedAt || 0);
		const dateB = new Date(b.data.publishedAt || 0);
		return dateB.getTime() - dateA.getTime();
	});

// BlogCardで使用する形式に変換
const blogs = filteredPosts.map((post) => ({
	title: post.data.title,
	emoji: { value: post.data.emoji || "📝" },
	tags: post.data.tags || [],
	slug: post.slug,
	url: `/blog/${post.slug}`,
	thumbnail: post.data.thumbnail || "",
}));
---

<Layout title={`タグ: ${tag} - BLOG`}>
	<main class="tag-detail">
		<div class="tag-detail__container">
			<div class="tag-detail__content">
				<header class="tag-detail__header">
					<h1 class="tag-detail__title">#{tag}</h1>
					<p class="tag-detail__description">
						{filteredPosts.length}件の記事があります
					</p>
				</header>

				{
					filteredPosts.length > 0 ? (
						<div class="tag-detail__grid">
							{blogs.map((blog) => (
								<BlogCard
									title={blog.title}
									emoji={blog.emoji.value}
									tags={blog.tags}
									slug={blog.slug}
									url={blog.url}
									thumbnail={blog.thumbnail}
								/>
							))}
						</div>
					) : (
						<div class="tag-detail__empty">
							<p>このタグの記事はまだありません。</p>
						</div>
					)
				}

				<div class="tag-detail__back">
					<a href="/blog" class="tag-detail__back-link">
						<svg
							xmlns="http://www.w3.org/2000/svg"
							width="24"
							height="24"
							viewBox="0 0 24 24"
							fill="none"
							stroke="currentColor"
							stroke-width="2"
							stroke-linecap="round"
							stroke-linejoin="round"
						>
							<path d="M19 12H5M5 12L12 19M5 12L12 5"></path>
						</svg>
						<span>ブログ一覧へ戻る</span>
					</a>
				</div>
			</div>
			<aside class="tag-detail__sidebar">
				<BlogSidebar />
			</aside>
		</div>
	</main>
</Layout>

<style>
	.tag-detail {
		padding: 40px 20px;
	}

	.tag-detail__container {
		max-width: 1200px;
		margin: 0 auto;
		display: grid;
		grid-template-columns: 1fr 300px;
		gap: 40px;
	}

	.tag-detail__content {
		overflow: hidden;
	}

	.tag-detail__header {
		text-align: center;
		margin-bottom: 40px;
	}

	.tag-detail__title {
		font-family: "Noto Sans JP", sans-serif;
		font-size: 32px;
		font-weight: 700;
		color: #262626;
		margin: 0 0 16px;
	}

	.tag-detail__description {
		color: #8c8c8c;
		font-size: 16px;
		margin: 0;
	}

	.tag-detail__grid {
		display: grid;
		grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
		gap: 20px;
		margin-bottom: 40px;
	}

	.tag-detail__empty {
		text-align: center;
		padding: 60px 20px;
		color: #8c8c8c;
		font-size: 16px;
	}

	.tag-detail__sidebar {
		position: relative;
	}

	.tag-detail__back {
		text-align: center;
	}

	.tag-detail__back-link {
		display: inline-flex;
		align-items: center;
		gap: 8px;
		color: #262626;
		text-decoration: none;
		padding: 12px 24px;
		border: 1px solid #262626;
		background-color: #ffffff;
		transition: all 0.2s ease;
	}

	.tag-detail__back-link:hover {
		background-color: #262626;
		color: #ffffff;
	}

	@media (max-width: 768px) {
		.tag-detail {
			padding: 20px 10px;
		}

		.tag-detail__container {
			grid-template-columns: 1fr;
			gap: 20px;
		}

		.tag-detail__sidebar {
			order: -1;
		}

		.tag-detail__title {
			font-size: 24px;
		}

		.tag-detail__grid {
			grid-template-columns: 1fr;
		}
	}
</style>
