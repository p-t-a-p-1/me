<context>
# Overview  
個人ブログサイトの拡張プロジェクト。現在はAstro + Newt CMSで構築されたシンプルなブログサイトですが、より機能豊富で魅力的なWebサイトに発展させたいと考えています。大量のエクスポートされたMarkdownコンテンツ（40以上の技術記事）を活用し、エンジニアとしての技術的な知見を効果的に発信するプラットフォームを構築します。

目標：
- コンテンツの発見性向上
- ユーザーエンゲージメントの増加
- SEO最適化
- 開発者としての技術力アピール
- 読みやすく使いやすいUI/UX

# Core Features  
1. **検索機能の強化**
   - 全文検索機能
   - タグベースの絞り込み
   - カテゴリ別検索
   - キーワードハイライト

2. **コンテンツ管理システムの改善**
   - タグ管理システム
   - 関連記事の自動表示
   - 記事の読了時間表示
   - 目次（TOC）の自動生成

3. **ユーザー体験の向上**
   - レスポンシブデザインの最適化
   - ダークモード対応
   - ページネーション機能
   - パンくずナビゲーション

4. **技術的な機能**
   - コードブロックのシンタックスハイライト強化
   - 記事のOGP画像自動生成
   - RSS/Atomフィード
   - サイトマップ自動生成

5. **分析・パフォーマンス**
   - Google Analytics連携
   - PageSpeed最適化
   - Core Web Vitals改善
   - 画像最適化（WebP対応）

# User Experience  
**主要なユーザー:**
- 技術記事を読みたいエンジニア
- 特定の技術情報を検索する開発者
- 技術トレンドに興味がある人

**ユーザージャーニー:**
1. トップページから興味のある記事を発見
2. 検索機能で特定の技術を調べる
3. 記事を読み、関連記事を巡回
4. タグやカテゴリで関連コンテンツを探索

**UI/UX考慮事項:**
- モバイルファーストデザイン
- 読みやすいタイポグラフィ
- 直感的なナビゲーション
- 高速なページロード
</context>
<PRD>
# Technical Architecture  
**現在の技術スタック:**
- Frontend: Astro 5.5.5
- CMS: Newt CMS (headless)
- スタイリング: CSS + コンポーネントベース
- デプロイメント: （要確認）
- コンテンツ: Markdown（40+記事）

**拡張アーキテクチャ:**
- 検索エンジン: Fuse.js または Algolia
- 画像最適化: Astro Image コンポーネント
- SEO: Astro Sitemap + RSS
- 分析: Google Analytics 4
- パフォーマンス: Service Worker + キャッシュ戦略

**データモデル拡張:**
- 記事メタデータの強化（読了時間、更新日、関連度）
- タグ分類システムの体系化
- 検索インデックスの構築

# Development Roadmap  

**フェーズ1: 基盤整備（MVP）**
- 既存コンテンツの整理と最適化
- 基本的な検索機能の実装
- レスポンシブデザインの改善
- SEO基本設定（メタタグ、構造化データ）

**フェーズ2: コンテンツ機能強化**
- 高度な検索機能（フィルタリング、ソート）
- 関連記事表示システム
- 目次自動生成機能
- タグ管理システムの改善

**フェーズ3: UX/UI向上**
- ダークモード実装
- ページネーション機能
- パンくずナビゲーション
- 読了時間・進捗表示

**フェーズ4: パフォーマンス最適化**
- 画像最適化とWebP対応
- コードスプリッティング
- Service Worker実装
- Core Web Vitals最適化

**フェーズ5: 分析・機能拡張**
- Google Analytics連携
- RSS/Atomフィード
- OGP画像自動生成
- コメント機能（オプション）

# Logical Dependency Chain
1. **基盤（フェーズ1）**: SEO設定とレスポンシブデザインは最優先
2. **検索機能**: コンテンツ整理後に検索インデックスを構築
3. **UI改善**: 基本機能確立後にダークモードなどのUX向上
4. **パフォーマンス**: 機能実装完了後に最適化を実施
5. **分析**: 最後に測定・改善サイクルを確立

各フェーズは独立して動作し、段階的にリリース可能な設計とする。

# Risks and Mitigations  
**技術的課題:**
- Newt CMSとの連携複雑化 → APIレスポンス最適化とキャッシュ戦略
- 検索機能のパフォーマンス → インデックスサイズの最適化とクライアントサイド検索

**MVP定義:**
- 既存機能を壊さずに段階的改善
- 最低限: レスポンシブ + 基本検索 + SEO改善

**リソース制約:**
- 一人開発での実装順序の最適化
- 既存コンテンツを活用した段階的拡張

# Appendix  
**技術調査項目:**
- Astro 5.5の新機能活用方法
- Newt CMS APIの最適化手法
- 検索ライブラリの比較検討（Fuse.js vs Algolia vs Elasticsearch）
- 画像最適化戦略（Sharp vs Astro Image）

**参考サイト:**
- 類似技術ブログのUX分析
- モダンWebサイトのパフォーマンス指標
- アクセシビリティガイドライン準拠
</PRD> 